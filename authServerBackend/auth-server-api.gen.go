// Package authSpec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package authSpec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for CreateAccountRequestAccountType.
const (
	TG  CreateAccountRequestAccountType = "TG"
	WEB CreateAccountRequestAccountType = "WEB"
)

// AccountResponse defines model for AccountResponse.
type AccountResponse struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Login     *string `json:"login,omitempty"`
}

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	AccountType *CreateAccountRequestAccountType `json:"accountType,omitempty"`
	Email       *string                          `json:"email,omitempty"`
	FirstName   *string                          `json:"firstName,omitempty"`
	LastName    *string                          `json:"lastName,omitempty"`
	Login       *string                          `json:"login,omitempty"`
	Password    *string                          `json:"password,omitempty"`
	TelegramId  *int                             `json:"telegramId,omitempty"`
}

// CreateAccountRequestAccountType defines model for CreateAccountRequest.AccountType.
type CreateAccountRequestAccountType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	BusinessCode *int    `json:"businessCode,omitempty"`
	Error        *string `json:"error,omitempty"`
	Path         *string `json:"path,omitempty"`
	Status       *int    `json:"status,omitempty"`
	Timestamp    *string `json:"timestamp,omitempty"`
}

// RegisterAccountJSONRequestBody defines body for RegisterAccount for application/json ContentType.
type RegisterAccountJSONRequestBody = CreateAccountRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /account)
	RegisterAccount(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// RegisterAccount operation middleware
func (siw *ServerInterfaceWrapper) RegisterAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterAccount(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/account", wrapper.RegisterAccount)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUwWoUQRD9laX0OOzMKkKY2yYEWQSVGPAge+jM1s52mOluq2oiYVlY16t3f2NRhBDQ",
	"b+j5I+mejTHJRDwEb029qnpvql7NEgpbO2vQCEO+BC4WWKv4HBeFbYwcITtrGEPIkXVIojEmYK10FR5y",
	"7hByYCFtSlglMNfE8lLV2ItW6m+gLbXpQVbJVcSenGIhIfeAUAn+1vm+QZa7MlWHH8fqJaBpasjfwfFz",
	"SODt4T5Mk7sq/uunJeAU8wdLs15QsMKSVD35E9ZGsETqn8shkaX793bSsDbIfGBn2NcyAQwN7lEqi16A",
	"RUnD/e1E18iiavdPew0hbeY2JmupAjZuZDFgpDOkwfj1BBI4Q2JtDeQwGmbDLNBYh0Y5DTk8HWbDEXRq",
	"o6Z0Z4I4DNu5ZIZckHbSdfFf/LZd++/+m79oP7abdu0v2rX/6b/6bbtpPw/81l/6S79tP/kf7QYiHalQ",
	"HRYDR1hqFqSdGyEB6gy5b2fnga6wRrBToJyrdBFr01O25vrwwusx4RxyeJReX2a6O8u01/GrODLa7Tt+",
	"75MsezDO2/+ByHZzeK9ehPk/e0DSmxbuoZwYQTKqGrzpXBELOjupksOBX21iGqs78wTg9uYrW6gKEmio",
	"ghwWIi5P0xhcWJZ8L9sbwWq6+hUAAP//F+bCjSoFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
