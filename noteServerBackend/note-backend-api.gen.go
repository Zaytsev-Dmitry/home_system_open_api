// Package noteSpec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package noteSpec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CreateNoteRequest defines model for CreateNoteRequest.
type CreateNoteRequest struct {
	AccountId   *int    `json:"accountId,omitempty"`
	Description *string `json:"description,omitempty"`
	Link        *string `json:"link,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	BusinessCode *int    `json:"businessCode,omitempty"`
	Error        *string `json:"error,omitempty"`
	Path         *string `json:"path,omitempty"`
	Status       *int    `json:"status,omitempty"`
	Timestamp    *string `json:"timestamp,omitempty"`
}

// NoteResponse defines model for NoteResponse.
type NoteResponse struct {
	AccountId   *int    `json:"accountId,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Link        *string `json:"link,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// NoteResponseList defines model for NoteResponseList.
type NoteResponseList struct {
	Objects *[]NoteResponse `json:"objects,omitempty"`
}

// SaveNoteJSONRequestBody defines body for SaveNote for application/json ContentType.
type SaveNoteJSONRequestBody = CreateNoteRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /note)
	SaveNote(c *gin.Context)

	// (DELETE /note/{accountId})
	DeleteNotesByAccountId(c *gin.Context, accountId int)

	// (GET /note/{accountId})
	GetNotesByAccountId(c *gin.Context, accountId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SaveNote operation middleware
func (siw *ServerInterfaceWrapper) SaveNote(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SaveNote(c)
}

// DeleteNotesByAccountId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotesByAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "accountId" -------------
	var accountId int

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accountId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNotesByAccountId(c, accountId)
}

// GetNotesByAccountId operation middleware
func (siw *ServerInterfaceWrapper) GetNotesByAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "accountId" -------------
	var accountId int

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accountId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNotesByAccountId(c, accountId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/note", wrapper.SaveNote)
	router.DELETE(options.BaseURL+"/note/:accountId", wrapper.DeleteNotesByAccountId)
	router.GET(options.BaseURL+"/note/:accountId", wrapper.GetNotesByAccountId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xV3WoUTRB9laG+73LZmWiEMHdJFAlKlORSctGZqex2nOluq2sDyzLgD94Jgm8gvkAu",
	"hATF5BV63ki6O2v2Z4Kiieaut6q26vQ5dXomUOjaaIWKLeQTsMUQaxGOm4SCcVsz7uCLEVr2QUPaILHE",
	"UCKKQo8Ub5X+B48NQg5SMQ6QoOlBibYgaVhqNVNgmaQa+Hwl1fPOhBI1diSa3jSi9w+xYF/6gEjTDlqj",
	"lcVlhPsjKxVau6lL7AaJvkEnCiN42JmwLHhku9uxrNGyqM0v4o/8XgX/DwmW5Y3xPov7sexajlgbjpKx",
	"Dof/CQ8gh//Sy61LL1YunWPicqQgEuMuDD4k1YEOgCVXPud7JMKYShbCs5KsP92CHhwh2cARrPSzfua7",
	"a4NKGAk53O1n/RWIcgeQqdIctdDxXnM0g/voztq37Ut37L650/Z1+y5xJ+7YnbvT9pX70r6B0J0CAK8c",
	"7Iqj4CPoAUUrbehy7DsXWjGqMGQGdXpoo6CRmp8Rt2zUJpBDF2SGS93JsmsbOK9Us7iI8OSRZ/jeNU6c",
	"d3nHyC3FSEpUyS7SEVIS/hC3Rgws5M/CasCejwR908kPbzVR4wqj6gtqf3Kf3bH72ql04s7dWXJp0kXh",
	"74emfrLdGK/PlBlBokZG8tAmIP2k8NxMPQizTf3SSMIScqYR9mY4W3wSmr0l2VeX77Stk6kqt1anHgyw",
	"y3wf3En7/jekeIj8b3W4GfuFp/dKC65G9f+OtBuiTGj6AN1a+/vPd6iJis+3qXQhKujBiCrIYchs8jQN",
	"waG2nK9laxk0e833AAAA//+n4jD7NQkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
